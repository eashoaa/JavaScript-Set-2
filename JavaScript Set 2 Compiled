/**
 * Shift letter
 *
 * Shift a letter right by the given number.
 * Wrap the letter around if it reaches the end of the alphabet.
 *
 * @param {string} letter A single uppercase English letter, or a space
 * @param {Number} shift The number by which to shift the letter
 * @returns {string} The letter, shifted appropriately, if a letter, otherwise a space.
 */
function shiftLetter(letter, shift) {
    if (letter === ' ') return ' ';
    const asciiA = 'A'.charCodeAt(0);
    const letterCode = letter.charCodeAt(0) - asciiA;
    const shiftedCode = (letterCode + shift) % 26;
    return String.fromCharCode(asciiA + shiftedCode);
}

/**
 * Caesar cipher
 *
 * Apply a shift number to a string of uppercase English letters and spaces.
 *
 * @param {string} message A string of uppercase English letters and/or spaces
 * @param {Number} shift The number by which to shift the letters
 * @returns {string} The message, shifted appropriately.
 */
function caesarCipher(message, shift) {
    function shiftLetter(letter, shift) {
        if (letter === ' ') return ' ';
        const asciiA = 'A'.charCodeAt(0);
        const letterCode = letter.charCodeAt(0) - asciiA;
        const shiftedCode = (letterCode + shift) % 26;
        return String.fromCharCode(asciiA + shiftedCode);
    }

    return message
        .split('')
        .map(letter => shiftLetter(letter, shift))
        .join('');
}

/**
 * Shift by letter
 *
 * Shift a letter to the right using the number equivalent of another letter.
 *
 * @param {string} letter A single uppercase English letter, or a space
 * @param {string} letterShift A single uppercase English letter
 * @returns {string} The letter, shifted appropriately
 */
function shiftByLetter(letter, letterShift) {
    if (letter === ' ') return ' ';

    let shiftValue = letterShift.charCodeAt(0) - 'A'.charCodeAt(0);
    let newCharCode = letter.charCodeAt(0) + shiftValue;

    if (newCharCode > 'Z'.charCodeAt(0)) {
        newCharCode = newCharCode - 26;
    }

    return String.fromCharCode(newCharCode);
}

/**
 * Vigenere cipher
 *
 * Encrypt a message using a keyphrase instead of a static number.
 * Every letter in the message is shifted by the number represented by the respective letter in the key.
 * Spaces are ignored.
 *
 * Example:
 * vigenereCipher('A C', 'KEY') -> 'K A'
 *
 * If needed, the keyphrase is extended to match the length of the message.
 * If the key is 'KEY' and the message is 'LONGTEXT', the key will be extended to 'KEYKEYKE'.
 *
 * @param {string} message A string of uppercase English letters and/or spaces
 * @param {string} key A string of uppercase English letters, no spaces. Will not exceed the length of the message.
 * @returns {string} The message, shifted appropriately
 */
function vigenereCipher(message, key) {
    const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    function shiftChar(char, keyChar) {
        const charIndex = alphabet.indexOf(char);
        const keyIndex = alphabet.indexOf(keyChar);
        return alphabet[(charIndex + keyIndex) % 26];
    }

    let encryptedMessage = "";
    let keyIndex = 0;

    for (let i = 0; i < message.length; i++) {
        if (message[i] === " ") {
            encryptedMessage += " ";
            keyIndex++;
        } else {
            encryptedMessage += shiftChar(message[i], key[keyIndex % key.length]);
            keyIndex++;
        }
    }

    return encryptedMessage;
}

/**
 * Scytale cipher
 *
 * Encrypts a message by simulating a scytale cipher.
 *
 * @param {string} message A string of uppercase English letters and underscores. Underscores represent spaces.
 * @param {number} shift A positive integer that does not exceed the length of the message
 * @returns {string} The encoded message using the scytale cipher
 */
function scytaleCipher(message, shift) {
    let messageLength = message.length;
    let remainder = messageLength % shift;

    if (remainder !== 0) {
        let padding = shift - remainder;
        message += '_'.repeat(padding);
        messageLength = message.length;
    }

    let encodedMessage = '';
    let numRows = messageLength / shift;

    for (let i = 0; i < messageLength; i++) {
        let row = Math.floor(i / shift);
        let col = i % shift;
        let index = col * numRows + row;

        encodedMessage += message[index];
    }

    return encodedMessage;
}

/**
 * Scytale decipher
 *
 * Decrypts a message that was originally encrypted with the `scytaleCipher` function.
 *
 * @param {string} message A string of uppercase English letters and underscores. Underscores represent spaces.
 * @param {number} shift A positive integer that does not exceed the length of the message
 * @returns {string} The deciphered message
 */
function scytaleDecipher(message, shift) {
    let numRows = Math.ceil(message.length / shift);
    let decipheredMessage = '';

    for (let col = 0; col < shift; col++) {
        for (let row = 0; row < numRows; row++) {
            let index = row * shift + col;
            if (index < message.length) {
                decipheredMessage += message[index];
            }
        }
    }

    return decipheredMessage;
}
